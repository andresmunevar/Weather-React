{"version":3,"sources":["components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","components/About.jsx","components/Ciudad.jsx","containers/App.js","index.js"],"names":["SearchBar","onSearch","useState","city","setCity","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Nav","className","to","Card","min","max","name","img","onClose","id","onClick","src","width","height","alt","Cards","cities","map","c","key","About","Ciudad","temp","weather","wind","clouds","latitud","longitud","App","setCities","oldCities","filter","ciudad","fetch","then","r","json","recurso","undefined","main","Math","round","temp_min","temp_max","icon","speed","all","coord","lat","lon","find","alert","onFilter","ciudadId","parseInt","length","path","render","exact","component","match","params","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7bd63f05.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function SearchBar({onSearch}) {\n  const [city, setCity] = useState(\"\");\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      onSearch(city);\n    }}>\n      <input\n        type=\"text\"\n        placeholder=\"City...\"\n        value={city}\n        onChange={e => setCity(e.target.value)}\n      />\n      <input type=\"submit\" value=\"Add\" />\n    </form>\n  );\n}\n","import React from 'react';\nimport SearchBar from './SearchBar.jsx';\nimport './Nav.css';\nimport { Link } from 'react-router-dom';\n\n\nfunction Nav({onSearch}) {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <Link to='/'>\n        <span className=\"navbar-brand\">\n          \n          Weather App\n        </span>\n      </Link>\n      <Link to='/about'>\n        <span>About</span>\n      </Link>  \n        <SearchBar\n          onSearch={onSearch}\n        />\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport './Card.css';\nimport { Link } from 'react-router-dom';\n\nexport default function Card ({min, max, name, img, onClose, id}) {\n    return (\n      <div className=\"card\">\n        <div id=\"closeIcon\" className=\"row\">\n            <button onClick={onClose} className=\"btn btn-sm btn-danger\">X</button>\n        </div>\n        <div className=\"card-body\">\n          <Link to={`/ciudad/${id}`} >\n            <h5 className=\"card-title\">{name}</h5>\n          </Link>\n          <div className=\"row\">\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <p>Min</p>\n              <p>{min}°</p>\n            </div>\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <p>Max</p>\n              <p>{max}°</p>\n            </div>\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\n              <img className=\"iconoClima\" src={\"http://openweathermap.org/img/wn/\"+img+\"@2x.png\"} width=\"80\" height=\"80\" alt=\"\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n};\n","import React from 'react';\nimport './Cards.css';\n\nimport Card from './Card.jsx';\n\nexport default function Cards({cities, onClose}) {\n  return (\n    <div className='cards'>\n      {cities.map(c => <Card\n          key={c.id}\n          max={c.max}\n          min={c.min}\n          name={c.name}\n          img={c.img}\n          onClose={() => onClose(c.id)}\n          id={c.id}\n        /> )}\n    </div>\n  );\n}\n","import React from 'react';\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\nfunction About({onSearch}) {\r\n  return (\r\n    <nav>\r\n        <span>         \r\n          <h2>ABOUT</h2>\r\n        </span>\r\n        <span>         \r\n          <div>Frontend App done with React using https://openweathermap.org/api</div>\r\n          {/* <div>This app has a pre-loaded city which is Ubate becouse there is where my parents live. Feel free to close it!!!</div> */}\r\n          <div>Coded by Andres Munevar</div>\r\n        </span>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nexport default function Ciudad({city}) {\r\n    \r\n    return (\r\n        <div className=\"ciudad\">\r\n                <div className=\"container\">\r\n                    <h2>{city.name}</h2>\r\n                    <div className=\"info\">\r\n                        <div>Temperature: {city.temp} ºC</div>\r\n                        <div>Weather: {city.weather}</div>\r\n                        <div>Wind: {city.wind} km/h</div>\r\n                        <div>Clouds: {city.clouds}</div>\r\n                        <div>Latitud: {city.latitud}º</div>\r\n                        <div>Longitud: {city.longitud}º</div>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\nimport Cards from '../components/Cards.jsx';\nimport About from '../components/About.jsx';\nimport Ciudad from '../components/Ciudad.jsx';\n\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  // const ubate = ;\n  const [cities, setCities] = useState([]);\n  \n  //  function preLoadUbate() {\n  //   //Llamado a la API del clima\n  //   fetch(`http://api.openweathermap.org/data/2.5/weather?q=ubate&units=metric&appid=${apiKey}`)\n  //     .then(r => r.json())\n  //     .then((recurso) => {\n  //       // if(recurso.main !== undefined){\n  //         const ciudad = {\n  //           min: Math.round(recurso.main.temp_min),\n  //           max: Math.round(recurso.main.temp_max),\n  //           img: recurso.weather[0].icon,\n  //           id: recurso.id,\n  //           wind: recurso.wind.speed,\n  //           temp: recurso.main.temp,\n  //           name: recurso.name,\n  //           weather: recurso.weather[0].main,\n  //           clouds: recurso.clouds.all,\n  //           latitud: recurso.coord.lat,\n  //           longitud: recurso.coord.lon\n  //         };\n  //         // if(!cities.find(city => city.id === ciudad.id)){\n  //         setCities(oldCities => [...oldCities, ciudad]);\n  //     }\n  // console.log(\"ubate\");\n  // }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&units=metric&appid=${apiKey}`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          if(!cities.find(city => city.id === ciudad.id)){\n            setCities(oldCities => [...oldCities, ciudad]);\n            //this.setState({cities: [...this.state.cities, ciudad]});\n          } else { \n            alert(\"City already showed\");\n          }\n        } else {\n          alert(\"City not found\");\n        }\n      });\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id == parseInt(ciudadId));\n    if(ciudad.length > 0) {\n        return ciudad[0];\n    } else {\n        return null;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Route\n        path='/'\n        render={() => <Nav onSearch={onSearch} />}\n      />\n      <Route\n        exact path='/about'\n        component={About}\n      />\n      <Route\n        exact path='/'\n        render={() => <Cards \n          cities={cities}\n          onClose={onClose}\n        /> }              \n      />\n      <Route  \n        exact path='/ciudad/:ciudadId'\n        render={({match}) => <Ciudad\n          city={onFilter(match.params.ciudadId)}\n        />}\n      />\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}